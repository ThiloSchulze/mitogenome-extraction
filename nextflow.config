env { PYTHONNOUSERSITE = 1 }

// A failed process is retried when encountering one of these exit codes
final ERROR_CODES = [12,143,137,104,134,139]
// Use one of these node for memory-intense tasks
final FAT_PARTITION = 'fat'
final FAT_PLUS_PARTITION = 'fat+'
// Use this node for non-memory-intense tasks
final NORMAL_PARTITION = 'medium'
// Start using the fat/fat+ partitions when the amount of memory exceeds one
// of these values
final FAT_PARTITION_THRESHOLD = 60.GB
final FAT_PLUS_PARTITION_THRESHOLD = 500.GB
// Never request more memory than this from a node
final MAX_NODE_MEMORY = 1.TB
// Job submissions can never be longer than this
final MAX_NODE_WALLTIME = 5.d
// Request `--qos=long` when job submissions are longer than this threshold
final QOS_LONG_THRESHOLD = 2.d

params {
    // Mandatory options
    contigs                 = null
    mitogenome              = null
    reads                   = null

    // Non-mandatory options
    output                  = "mitogenome-extraction"
    species_id              = null
    help                    = false
  
    // Mitogenome extraction
    coverage_cutoff         = 6
    min_blast_wordsize      = 11
    max_blast_wordsize      = 25
    nucleotide_size         = 16500
  
    // NOVOPlasty settings
    min_size                = 12000
    max_size                = 22000
    kmer_size               = 33
    max_memory              = 6
    read_length             = 151
    insert_size             = 300
  
    // MITOS settings
    mitos_reference         = "refseq63m"
    genetic_code            = '05'
  
    // Flow control
    skip_identification     = false
  
    // Resource allocation (default values only, expected to be overwritten)
    max_retries           = 3
    max_cpus              = 4
    // Memory allocation guide:
    //   B = bytes, KB = kilobytes, MB = megabytes, GB = gigabytes, and
    //   TB = terabytes
    //   Example: 32.GB
    max_memory            = 10.GB
    max_time              = '1.d'  

}

process {
    withLabel:process_low {
        cpus           = { 4 * task.attempt < params.max_cpus ?
                           4 * task.attempt : params.max_cpus }
        memory         = { 8.GB * task.attempt < params.max_memory ?
                           8.GB * task.attempt : params.max_memory }
        time           = { 3.h * task.attempt < params.max_time ?
                           3.h * task.attempt : params.max_time }
        clusterOptions = '--constraint=scratch2'
        errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
        maxRetries     = params.max_retries
    }
    withLabel:process_medium {
        cpus           = { 4 * task.attempt < params.max_cpus ?
                           4 * task.attempt : params.max_cpus }
        memory         = { 8.GB * task.attempt < params.max_memory ?
                           8.GB * task.attempt : params.max_memory }
        time           = { 6.h * task.attempt < params.max_time ?
                           6.h * task.attempt : params.max_time }
        clusterOptions = '--constraint=scratch2'
        errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
        maxRetries     = params.max_retries
    }
    withLabel:process_high {
        cpus           = params.max_cpus
        // Do not utilize more than 1 TB of memory (most nodes have less)
        memory         = { params.max_memory * task.attempt < MAX_NODE_MEMORY ?
                           params.max_memory * task.attempt : MAX_NODE_MEMORY }
        // Runtime cannot exceed 5 days total
        time           = { params.max_time < MAX_NODE_WALLTIME ?
                           params.max_time : MAX_NODE_WALLTIME }
        // Add the `--qos=long` flag if the job spans more than 48 hours
        clusterOptions = { params.max_time > QOS_LONG_THRESHOLD ?
                           '--constraint=scratch2 --qos=long' :
                           '--constraint=scratch2' }
        queue = { params.max_memory * task.attempt > FAT_PLUS_PARTITION_THRESHOLD ?
                  FAT_PLUS_PARTITION : FAT_PARTITION }
        errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
        maxRetries     = params.max_retries
  }
}

profiles {

    /*
    
    List of Dockerimages:

    seqkit:     pegi3s/seqkit:2.1.0
    blast:      pegi3s/blast:2.10.0
    novoplasty: cyverse/novoplasty:3.7
    emboss:     biocontainers/emboss:v6.6.0dfsg-7b1-deb_cv1
    mitos:      nanozoo/mitos:2.0.8--c87ec9c
    
    */

    local {
        docker.enabled = true
        process {
            withName: extract_mitogenome {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: reassemble_mitogenome {
                container = 'cyverse/novoplasty:3.7'
            }
            withName: strand_control {
                container = 'pegi3s/blast:2.10.0'
            }
            withName: annotate_mitogenome {
                container = 'nanozoo/mitos:2.0.8--c87ec9c'
            }
            withName: mitos_formatting {
                conatiner = 'clemensma/symbiontdivider:latest'
            }
        }
    }

    slurm_cluster {
        singularity.enabled = true
        singularity.cacheDir = 'cache'
        singularity.autoMounts = true

        executor {
            name = 'slurm'
            queueSize = 50
            submitRateLimit = '10 sec'
        }

        process {
            withName: extract_mitogenome {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: reassemble_mitogenome {
                container = 'docker://cyverse/novoplasty:3.7'
            }
            withName: strand_control {
                container = 'docker://pegi3s/blast:2.10.0'
            }
            withName: annotate_mitogenome {
                container = 'docker://nanozoo/mitos:2.0.8--c87ec9c'
            }
            withName: mitos_formatting {
                conatiner = 'docker://clemensma/symbiontdivider:latest'
            }
        }
    }
}
